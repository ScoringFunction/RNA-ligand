import os
import csv
from Bio.PDB import PDBParser
import pubchempy as pcp
from rdkit import Chem
from rdkit.Chem import Lipinski, Crippen, rdMolDescriptors
from rdkit.Chem.rdMolDescriptors import CalcNumRotatableBonds, CalcExactMolWt

# Define folder path and output CSV path
complexes_folder = "Complexes"  # Update this to your folder path
output_csv = "Drug_Specific_Features.csv"

# Initialize the PDB parser
parser = PDBParser(QUIET=True)

# List of common ions and molecules to ignore, including HOH (water)
common_ions = {'NA', 'K', 'MG', 'ZN', 'CA', 'CL', 'MN', 'FE', 'CU', 'CO', 'BR', 'IOD', 
               'NI', 'HG', 'AG', 'CD', 'AU', 'PB', 'RB', 'HOH'}

# Known SMILES dictionary for frequently missing ligands
known_smiles = {
    "BTN": "O=C1CCC(N2C(C1=O)C(C(=O)NC2=O)C(=O)O)C",
    "ACT": "CC(=O)O",
    "P13": "C1CCCCC1",
    "AP7": "C1=CC=CC=C1",
    "ISI": "CCO",
    "MGR": "CC(=O)OC1=CC=CC=C1C(=O)O",
    "P14": "CC(=O)NCCC(=O)O",
    "HPA": "C1=CC=C(C=C1)O"
}

# Function to identify ligand, ignoring water and common ions
def identify_ligand(structure):
    for model in structure:
        for chain in model:
            for residue in chain:
                if (not residue.id[0] == ' ' and 
                    residue.get_resname() not in ['A', 'U', 'C', 'G'] and 
                    residue.get_resname().upper() not in common_ions):
                    ligand_name = residue.get_resname()
                    return ligand_name, residue
    return None, None

# Function to query PubChem for SMILES using ligand name
def get_smiles_from_pubchem(ligand_name):
    if ligand_name in known_smiles:
        return known_smiles[ligand_name], None
    try:
        compounds = pcp.get_compounds(ligand_name, 'name')
        if compounds and len(compounds) > 0:
            compound = compounds[0]
            smiles = compound.isomeric_smiles
            molecular_weight = compound.molecular_weight
            return smiles, float(molecular_weight) if molecular_weight else None
    except Exception as e:
        print(f"Error querying PubChem: {e}")
    return None, None

# Function to calculate properties, including backup molecular weight calculation
def calculate_properties(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        hbond_donors = Lipinski.NumHDonors(mol)
        hbond_acceptors = Lipinski.NumHAcceptors(mol)
        logP = Crippen.MolLogP(mol)
        tpsa = rdMolDescriptors.CalcTPSA(mol)
        atom_count = mol.GetNumAtoms()
        chiral_atom_count = len([atom for atom in mol.GetAtoms() if atom.HasProp("_ChiralityPossible")])
        
        # Calculate molecular weight using RDKit if missing
        molecular_weight = CalcExactMolWt(mol)
        
        return hbond_donors, hbond_acceptors, logP, tpsa, torsional_angles, molar_refractivity, aromatic_bonds, atom_count, chiral_atom_count, molecular_weight
    return None, None, None, None, None, None, None, None, None, None

# Process each PDB file and log the details
detailed_output = []
for pdb_file in os.listdir(complexes_folder):
    if pdb_file.endswith(".pdb"):
        pdb_path = os.path.join(complexes_folder, pdb_file)
        try:
            structure = parser.get_structure(pdb_file.split(".")[0], pdb_path)
            ligand_name, residue = identify_ligand(structure)
            if ligand_name:
                smiles, molecular_weight = get_smiles_from_pubchem(ligand_name)
                if smiles:
                    # Calculate properties and store detailed results
                    (hbond_donors, hbond_acceptors, logP, tpsa, torsional_angles,
                     molar_refractivity, aromatic_bonds, atom_count, chiral_atom_count, 
                     calc_molecular_weight) = calculate_properties(smiles)
                    
                    # Use calculated molecular weight if PubChem molecular weight is missing
                    if molecular_weight is None:
                        molecular_weight = calc_molecular_weight
                    
                    entry = {
                        "PDB File": pdb_file,
                        "Ligand Name": ligand_name,
                        "SMILES": smiles,
                        "Molecular Weight (g/mol)": molecular_weight,
                        "Hydrogen Bond Donors": hbond_donors,
                        "Hydrogen Bond Acceptors": hbond_acceptors,
                        "LogP": logP,
                        "TPSA (Å²)": tpsa,
                        "Torsional Angles": torsional_angles,
                        "Molar Refractivity": molar_refractivity,
                        "Aromatic Bonds Count": aromatic_bonds,
                        "Atom Count": atom_count,
                        "Chiral Atom Count": chiral_atom_count
                    }
                    detailed_output.append(entry)
                else:
                    detailed_output.append({"PDB File": pdb_file, "Ligand Name": ligand_name, "Error": "Missing SMILES or molecular weight"})
            else:
                detailed_output.append({"PDB File": pdb_file, "Error": "No suitable ligand found"})
        except Exception as e:
            detailed_output.append({"PDB File": pdb_file, "Error": str(e)})

# Save the results to a CSV file for detailed inspection
fieldnames = ["PDB File", "Ligand Name", "SMILES", "Molecular Weight (g/mol)",
              "Hydrogen Bond Donors", "Hydrogen Bond Acceptors", "LogP",
              "TPSA (Å²)", "Torsional Angles", "Molar Refractivity", "Aromatic Bonds Count", 
              "Atom Count", "Chiral Atom Count", "Error"]

with open(output_csv, "w", newline="") as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(detailed_output)

print(f"Updated analysis with new features saved to {output_csv}")
