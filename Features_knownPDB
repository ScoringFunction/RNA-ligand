import os
import csv
import pandas as pd
import MDAnalysis as mda
from Bio.PDB import PDBParser, NeighborSearch
from scipy.spatial.distance import cdist
import numpy as np
import pubchempy as pcp
from rdkit import Chem
from rdkit.Chem import Lipinski, Crippen, rdMolDescriptors
from rdkit.Chem.rdMolDescriptors import CalcNumRotatableBonds, CalcExactMolWt
import subprocess

# Folder path where your PDB files are located
folder_path = 'Complexes'

# Initialize PDB parser
parser = PDBParser(QUIET=True)

# Define common ions and molecules to ignore for ligand identification
common_ions = {'NA', 'K', 'MG', 'ZN', 'CA', 'CL', 'MN', 'FE', 'CU', 'CO', 'BR', 'IOD', 'NI', 'HG', 'AG', 'CD', 'AU', 'PB', 'RB', 'HOH'}

# Known SMILES dictionary for frequently missing ligands
known_smiles = {
    "BTN": "O=C1CCC(N2C(C1=O)C(C(=O)NC2=O)C(=O)O)C",
    "ACT": "CC(=O)O",
    "P13": "C1CCCCC1",
    "AP7": "C1=CC=CC=C1",
    "ISI": "CCO",
    "MGR": "CC(=O)OC1=CC=CC=C1C(=O)O",
    "P14": "CC(=O)NCCC(=O)O",
    "HPA": "C1=CC=C(C=C1)O"
}

# Initialize list to store all features
all_features = []

# Specify a specific PDB file to process, or set it to None to process all files in the folder
specific_pdb = '7rex.pdb'  # Change this to a PDB file name like 'example.pdb' if you want to process just one file

# Function to extract RNA-specific features
def extract_rna_features(pdb_file, pdb_id):
    features = {}
    structure = parser.get_structure(pdb_id, pdb_file)
    rna_sequence = ""
    valid_residues = {"A", "U", "G", "C"}
    rna_chain_id = None

    for chain in structure.get_chains():
        for residue in chain:
            if residue.resname.strip() in valid_residues:
                rna_chain_id = chain.id
                break
        if rna_chain_id:
            break

    if rna_chain_id:
        for residue in structure[0][rna_chain_id]:
            if residue.resname.strip() in valid_residues:
                rna_sequence += residue.resname.strip()
        
        features['nucleotide_composition_A'] = rna_sequence.count('A') / len(rna_sequence)
        features['nucleotide_composition_U'] = rna_sequence.count('U') / len(rna_sequence)
        features['nucleotide_composition_G'] = rna_sequence.count('G') / len(rna_sequence)
        features['nucleotide_composition_C'] = rna_sequence.count('C') / len(rna_sequence)
        features['gc_content'] = (rna_sequence.count('G') + rna_sequence.count('C')) / len(rna_sequence)

        # Save RNA sequence to a unique file for each PDB
        rna_sequence_file = f"rna_sequence_{pdb_id}.txt"
        with open(rna_sequence_file, "w") as file:
            file.write(rna_sequence)

        # RNAfold MFE calculation (using ViennaRNA)
        try:
            result = subprocess.run(['RNAfold', rna_sequence_file], capture_output=True, text=True)
            output = result.stdout
            mfe_line = output.split('\n')[1]
            mfe = float(mfe_line.split('(')[-1].strip(')'))
            features['minimum_free_energy'] = mfe
        except Exception as e:
            features['minimum_free_energy'] = None

        # Atom count
        atom_count = len(mda.Universe(pdb_file).select_atoms("nucleic"))
        features['atom_count'] = atom_count

    features['pdb_id'] = pdb_id
    return features

# Function to extract ligand-specific features
def extract_ligand_features(pdb_file, pdb_id):
    features = {}
    structure = parser.get_structure(pdb_id, pdb_file)
    ligand_name, residue = None, None

    for model in structure:
        for chain in model:
            for residue in chain:
                if (not residue.id[0] == ' ' and residue.get_resname() not in ['A', 'U', 'C', 'G'] and residue.get_resname().upper() not in common_ions):
                    ligand_name = residue.get_resname()
                    break
            if ligand_name:
                break

    if ligand_name:
        if ligand_name in known_smiles:
            smiles = known_smiles[ligand_name]
        else:
            try:
                compounds = pcp.get_compounds(ligand_name, 'name')
                smiles = compounds[0].isomeric_smiles
            except:
                smiles = None

        if smiles:
            mol = Chem.MolFromSmiles(smiles)
            features['SMILES'] = smiles
            features['Molecular Weight (g/mol)'] = CalcExactMolWt(mol)
            features['Hydrogen Bond Donors'] = Lipinski.NumHDonors(mol)
            features['Hydrogen Bond Acceptors'] = Lipinski.NumHAcceptors(mol)
            features['LogP'] = Crippen.MolLogP(mol)
            features['TPSA (Å²)'] = rdMolDescriptors.CalcTPSA(mol)
            features['Atom Count'] = mol.GetNumAtoms()
            features['Chiral Atom Count'] = len([atom for atom in mol.GetAtoms() if atom.HasProp("_ChiralityPossible")])

    return features

# Function to extract complex-specific features
def extract_complex_features(pdb_file, pdb_id):
    features = {}
    u = mda.Universe(pdb_file)
    rna_atoms = u.select_atoms("resname A C G U")
    drug_atoms = u.select_atoms("not resname A C G U")
    
    if len(rna_atoms) == 0 or len(drug_atoms) == 0:
        return None

    rna_positive_atoms = rna_atoms.select_atoms("name N*")
    drug_negative_atoms = drug_atoms.select_atoms("name O*")

    electrostatic_distances = cdist(rna_positive_atoms.positions, drug_negative_atoms.positions)
    electrostatic_contacts = electrostatic_distances < 5.0
    num_electrostatic_contacts = np.sum(electrostatic_contacts)
    avg_electrostatic_distance = np.mean(electrostatic_distances[electrostatic_contacts]) if np.sum(electrostatic_contacts) > 0 else None

    features['num_electrostatic_contacts'] = num_electrostatic_contacts
    features['avg_electrostatic_distance'] = avg_electrostatic_distance

    distances = cdist(rna_atoms.positions, drug_atoms.positions)
    vdw_contacts = distances < 4.0
    num_vdw_contacts = np.sum(vdw_contacts)
    avg_vdw_distance = np.mean(distances[vdw_contacts]) if np.sum(vdw_contacts) > 0 else None

    features['num_vdw_contacts'] = num_vdw_contacts
    features['avg_vdw_distance'] = avg_vdw_distance

    return features

# Process each PDB file and collect features
for file_name in os.listdir(folder_path):
    if file_name.endswith(".pdb"):
        if specific_pdb and file_name != specific_pdb:
            continue  # Skip files if we're processing only a specific one

        pdb_file = os.path.join(folder_path, file_name)
        pdb_id = os.path.splitext(file_name)[0]

        rna_features = extract_rna_features(pdb_file, pdb_id)
        ligand_features = extract_ligand_features(pdb_file, pdb_id)
        complex_features = extract_complex_features(pdb_file, pdb_id)

        if rna_features and ligand_features and complex_features:
            # Combine features with pdb_id as the first column
            all_features.append({**{'pdb_id': pdb_id}, **rna_features, **ligand_features, **complex_features})

# Convert features to DataFrame and save as CSV
if all_features:
    fieldnames = list(all_features[0].keys())  # Get field names from the first feature set
    with open("RNA_ligand_features.csv", mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(all_features)

    print("Features have been successfully merged and saved to 'merged_features.csv'.")
else:
    print("No features extracted.")
