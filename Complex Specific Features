# Importing necessary libraries
import MDAnalysis as mda
from Bio.PDB import PDBParser, NeighborSearch
from scipy.spatial.distance import cdist
import numpy as np
import os

# Folder path containing PDB files
folder_path = "Complexes"

# Initialize dictionary to store extracted features for each complex
all_features = {}

# Loop through each PDB file in the "Complexes" folder
for file_name in os.listdir(folder_path):
    if file_name.endswith(".pdb"):
        file_path = os.path.join(folder_path, file_name)
        
        # Load the PDB file
        u = mda.Universe(file_path)
        
        # Initialize dictionary to store features for the current PDB complex
        features = {}

        # Selecting RNA and drug atoms by common residue names
        rna_atoms = u.select_atoms("resname A C G U")  # assuming RNA residues are A, C, G, U
        drug_atoms = u.select_atoms("not resname A C G U")  # assuming drug atoms are not labeled as RNA residues

        # Check that the selections are not empty
        if len(rna_atoms) == 0:
            print(f"No RNA atoms found in {file_name}. Skipping this file.")
            continue
        if len(drug_atoms) == 0:
            print(f"No drug atoms found in {file_name}. Skipping this file.")
            continue

        # 1. Calculating Electrostatic Interactions (replacing hydrogen bonds)
        rna_positive_atoms = rna_atoms.select_atoms("name N*")  # Positive groups in RNA (e.g., nitrogen atoms)
        drug_negative_atoms = drug_atoms.select_atoms("name O*")  # Negative groups in drug (e.g., oxygen atoms)

        # Calculating electrostatic interactions
        electrostatic_distances = cdist(rna_positive_atoms.positions, drug_negative_atoms.positions)
        electrostatic_contacts = electrostatic_distances < 5.0  # Threshold for electrostatic interaction
        num_electrostatic_contacts = np.sum(electrostatic_contacts)
        avg_electrostatic_distance = np.mean(electrostatic_distances[electrostatic_contacts]) if np.sum(electrostatic_contacts) > 0 else None

        # Store electrostatic interaction features
        features['num_electrostatic_contacts'] = num_electrostatic_contacts
        features['avg_electrostatic_distance'] = avg_electrostatic_distance

        # 2. Calculating Van der Waals contacts (approximated by atom distance threshold)
        distances = cdist(rna_atoms.positions, drug_atoms.positions)
        vdw_contacts = distances < 4.0  # Threshold for van der Waals contact
        num_vdw_contacts = np.sum(vdw_contacts)
        avg_vdw_distance = np.mean(distances[vdw_contacts]) if np.sum(vdw_contacts) > 0 else None
        features['num_vdw_contacts'] = num_vdw_contacts
        features['avg_vdw_distance'] = avg_vdw_distance

        # 3. Extracting Binding Pocket Residue Composition using BioPython
        parser = PDBParser()
        structure = parser.get_structure(file_name, file_path)
        atoms = [atom for atom in structure.get_atoms()]
        ns = NeighborSearch(atoms)

        # Assume center and radius for binding pocket
        center_of_mass = rna_atoms.center_of_mass()
        binding_residues = ns.search(center_of_mass, radius=5.0)
        binding_residue_names = [residue.resname for residue in set([atom.get_parent() for atom in binding_residues])]
        features['binding_residue_composition'] = binding_residue_names

        # 4. Calculating Center of Mass Distance between RNA and Drug
        rna_com = rna_atoms.center_of_mass()
        drug_com = drug_atoms.center_of_mass()
        com_distance = np.linalg.norm(rna_com - drug_com)
        features['com_distance'] = com_distance

        # Store the features for the current PDB file
        all_features[file_name] = features
        print(f"Features extracted for {file_name}")

# Save all features to a TXT file
txt_file_path = "all_complex_features.txt"
with open(txt_file_path, "w") as f:
    for pdb_name, features in all_features.items():
        f.write(f"Features for {pdb_name}:\n")
        for key, value in features.items():
            # For list data (binding residue composition), join elements into a comma-separated string
            if isinstance(value, list):
                f.write(f"{key}: {', '.join(value)}\n")
            else:
                f.write(f"{key}: {value}\n")
        f.write("\n")

print(f"\nAll features have been saved to {txt_file_path}")
