import subprocess
from rdkit import Chem
from rdkit.Chem import Lipinski, Crippen, rdMolDescriptors, Descriptors  # Corrected import for MolWt
import csv

# Function to extract RNA-specific features
def extract_rna_features_from_sequence(rna_sequence):
    features = {}  # No need to add PDB ID here
    
    # Calculate nucleotide composition
    features['nucleotide_composition_A'] = rna_sequence.count('A') / len(rna_sequence)
    features['nucleotide_composition_U'] = rna_sequence.count('U') / len(rna_sequence)
    features['nucleotide_composition_G'] = rna_sequence.count('G') / len(rna_sequence)
    features['nucleotide_composition_C'] = rna_sequence.count('C') / len(rna_sequence)
    features['gc_content'] = (rna_sequence.count('G') + rna_sequence.count('C')) / len(rna_sequence)
    
    # RNAfold MFE calculation (using ViennaRNA)
    try:
        result = subprocess.run(['RNAfold'], input=rna_sequence, capture_output=True, text=True)
        output = result.stdout
        mfe_line = output.split('\n')[1]
        mfe = float(mfe_line.split('(')[-1].strip(')'))
        features['minimum_free_energy'] = mfe
    except Exception as e:
        features['minimum_free_energy'] = None

    return features

# Function to extract ligand-specific features from SMILES
def extract_ligand_features_from_smiles(smiles):
    features = {}  # No need to add PDB ID here
    
    mol = Chem.MolFromSmiles(smiles)
    
    if mol is not None:
        features['SMILES'] = smiles
        features['Molecular Weight (g/mol)'] = Descriptors.MolWt(mol)  # Corrected
        features['Hydrogen Bond Donors'] = Lipinski.NumHDonors(mol)
        features['Hydrogen Bond Acceptors'] = Lipinski.NumHAcceptors(mol)
        features['LogP'] = Crippen.MolLogP(mol)
        features['TPSA (Å²)'] = rdMolDescriptors.CalcTPSA(mol)
        features['Atom Count'] = mol.GetNumAtoms()
        features['Chiral Atom Count'] = len([atom for atom in mol.GetAtoms() if atom.HasProp("_ChiralityPossible")])
    else:
        features['SMILES'] = None

    return features

# Example RNA sequence (e.g., random sequence)
rna_sequence = "UGUGGUUC"

# Example SMILES string (e.g., random ligand)
smiles = "CN(C)"

# Extract RNA features from the sequence
rna_features = extract_rna_features_from_sequence(rna_sequence)
print("RNA Features:")
print(rna_features)

# Extract ligand features from the SMILES string
ligand_features = extract_ligand_features_from_smiles(smiles)
print("\nLigand Features:")
print(ligand_features)

# Combine both RNA and ligand features
combined_features = {**rna_features, **ligand_features}
print("\nCombined Features:")
print(combined_features)

# Save features to CSV
csv_filename = "rna_ligand_features.csv"

# Add the combined features to a list for saving
feature_data = [combined_features]

# Define the CSV fieldnames (column headers)
fieldnames = list(combined_features.keys())

# Write to CSV file
with open(csv_filename, mode='w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=fieldnames)
    writer.writeheader()  # Write the header row
    writer.writerows(feature_data)  # Write the features data

print(f"\nFeatures have been saved to '{csv_filename}'.")

